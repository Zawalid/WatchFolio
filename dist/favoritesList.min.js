"use strict";import{toggleList as e,closeList as t,displayShow as a,displayList as s,removeFromList as o,clearList as i,sortList as r,searchList as l,showSearchInput as c,hideSearchInput as n,updateLocalStorageOrDatabase as d,retrieveFromLocalStorageOrDatabase as v,storeInLocalStorageOrDatabase as m}from"/utilities.min.js";const p=document.getElementById("favoritesList"),u=p.querySelector("#actions"),f=document.querySelectorAll("#favoritesListButtons button");let h=[...p.querySelectorAll("[data-id]")];const x={shows:{name:"favoriteShows",list:new Set},seasons:{name:"favoriteSeasons",list:new Set},episodes:{name:"favoriteEpisodes",list:new Set},defaultButton:'<i class="fa-solid fa-heart"></i> Add To Favorites',activeButton:'<i class="fa-solid fa-heart"></i> Favorite'};for(let e in x)"defaultButton"!==e&&"activeButton"!==e&&v("Favorites",e=x[e]).then(e=>{"favoriteShows"===e.name&&e.list.forEach(e=>{e===window.location.search.split("=")[1]&&(document.querySelector("#overview [data-favorite=shows]").innerHTML=x.activeButton)})});m("Favorites",["favoriteShows","favoriteSeasons","favoriteEpisodes"]);const g=(e,t)=>{t.list.add(e),d("Favorites",[x.shows,x.seasons,x.episodes])},w=(e,t)=>{t.list.delete(e),d("Favorites",[x.shows,x.seasons,x.episodes])},y=async e=>{f.forEach(e=>{e.classList.remove("active")}),p.querySelector(`button[data-favorite='${e}'`).classList.add("active");var t=x[e].list,t=(0===t.size?[...u.querySelectorAll("i")].forEach(e=>{e.classList.replace("text-textColor2","text-[darkslategray]"),e.classList.replace("cursor-pointer","cursor-not-allowed")}):[...u.querySelectorAll("i")].forEach(e=>{e.classList.replace("text-[darkslategray]","text-textColor2"),e.classList.replace("cursor-not-allowed","cursor-pointer")}),0<t.size?(await Promise.all([...t].map(s=>{switch(e){case"shows":return a(s,p);case"seasons":return(async()=>{var e=await(await fetch("https://api.tvmaze.com/seasons/"+s)).json(),t=e.url.split("season")[1].split("/")[2].split("-").map(e=>e.charAt(0).toUpperCase()+e.slice(1)).join(" ");return`
        <div class="flex items-center justify-between" >
      <div class="flex items-center gap-3 " data-id="${e.id}">
      <img src="${e.image?.medium||"imgs/placeholder.png"}" alt="" class="w-[100px] rounded-lg" >
      <div>
      <h3 class="text-textColor font-bold text-lg">${e.name||"Season "+e.number} 
      <span class="text-textColor2 text-sm font-semibold mt-2 block">${t} - ${e.premiereDate.split("-")[0]} </span>
    </h3>
      </div>
      </div>
      <i class="fa-solid fa-trash text-textColor2 transition-colors hover:text-secondaryAccent duration-300 text-lg cursor-pointer" id="removeFromFavoriteList"></i>
      </div>
      `})();case"episodes":return(async()=>{var e=await(await fetch("https://api.tvmaze.com/episodes/"+s)).json(),t=e.url.match(/\/([^\/]+)-\d+x\d+/)[1].split("-").map(e=>e.charAt(0).toUpperCase()+e.slice(1)).join(" ");return`
        <div class="flex items-center justify-between" >
        <div class="flex items-center gap-3 " data-id="${e.id}">
        <img src="${e.image?.medium||"imgs/placeholder.png"}" alt="" class="w-[100px] rounded-lg" >
        <div>
      <h3 class="text-textColor font-bold text-lg h-7 overflow-y-auto">${e.name||"Episode "+e.number} </h3>
      <span class="block text-textColor2 text-sm font-semibold mt-2">
      Season ${e.season} - Episode ${e.number} </span>
      <span class="block text-textColor2 text-sm font-semibold mt-2">${t} - ${e.airdate.split("-")[0]} </span>

      </div>
      </div>
      <i class="fa-solid fa-trash text-textColor2 transition-colors hover:text-secondaryAccent duration-300 text-lg cursor-pointer" id="removeFromFavoriteList"></i>
      </div>
      `})()}}))).join(""):`
<div class="flex flex-col items-center h-full justify-center ">
<img src="imgs/undraw_no_data_re_kwbl.svg" alt="" class="w-[120px] mb-5">
<h2 class="font-bold text-textColor2 text-lg">List is empty</div>
</div>
`);p.querySelector("#favorites").innerHTML=t,h=[...p.querySelectorAll("[data-id]")]},L=(s(f,p,"favorite",y),o("removeFromFavoriteList",p,"favorite",x,y,w),e("favoritesList_toggler",p,u,y),t("favoritesList_toggler",p,u,y),i(p,x,"favorite",y),r(p),p.querySelector("input"));u.querySelector("#search").addEventListener("click",()=>{c(p,L,x,"favorite")}),L.addEventListener("keyup",e=>{"Enter"===e.key&&(l(L,p,h),n(p,L))});export{x as favoritesList,g as addToFavoritesList,w as removeFromFavoritesList};