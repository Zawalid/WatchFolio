"use strict";import{toggleList,closeList,displayShow,displayList,removeFromList,clearList,sortList,searchList,showSearchInput,hideSearchInput,updateLocalStorageOrDatabase,retrieveFromLocalStorageOrDatabase,storeInLocalStorageOrDatabase}from"/utilities.min.js";const favoritesListContainer=document.getElementById("favoritesList"),actions=favoritesListContainer.querySelector("#actions"),favoritesListButtons=document.querySelectorAll("#favoritesListButtons button");let currentListFavorites=[...favoritesListContainer.querySelectorAll("[data-id]")];const favoritesList={shows:{name:"favoriteShows",list:new Set},seasons:{name:"favoriteSeasons",list:new Set},episodes:{name:"favoriteEpisodes",list:new Set},defaultButton:'<i class="fa-solid fa-heart"></i> Add To Favorites',activeButton:'<i class="fa-solid fa-heart"></i> Favorite'};for(let t in favoritesList)"defaultButton"!==t&&"activeButton"!==t&&retrieveFromLocalStorageOrDatabase("Favorites",t=favoritesList[t]).then(t=>{const e=setInterval(()=>{t.list.forEach(t=>{t===window.location.search.split("=")[1]&&document.querySelector("#overview [data-favorite=shows]")&&(document.querySelector("#overview [data-favorite=shows]").innerHTML=favoritesList.activeButton,clearInterval(e))})})});storeInLocalStorageOrDatabase("Favorites",["favoriteShows","favoriteSeasons","favoriteEpisodes"]);const addToFavoritesList=(t,e)=>{e.list.add(t),updateLocalStorageOrDatabase("Favorites",[favoritesList.shows,favoritesList.seasons,favoritesList.episodes])},removeFromFavoritesList=(t,e)=>{e.list.delete(t),updateLocalStorageOrDatabase("Favorites",[favoritesList.shows,favoritesList.seasons,favoritesList.episodes])},displayFromFavoritesList=async e=>{favoritesListButtons.forEach(t=>{t.classList.remove("active")}),favoritesListContainer.querySelector(`button[data-favorite='${e}'`).classList.add("active");var t=favoritesList[e].list;t.size<=1?[...actions.querySelectorAll("i")].forEach(t=>{t.classList.replace("text-textColor2","text-[darkslategray]"),t.classList.replace("cursor-pointer","cursor-not-allowed")}):[...actions.querySelectorAll("i")].forEach(t=>{t.classList.replace("text-[darkslategray]","text-textColor2"),t.classList.replace("cursor-not-allowed","cursor-pointer")}),0<t.size&&(actions.querySelector("#clear").classList.replace("cursor-not-allowed","cursor-pointer"),actions.querySelector("#clear").classList.replace("text-[darkslategray]","text-textColor2"));t=0<t.size?(await Promise.all([...t].map(t=>{switch(e){case"shows":return displayShow(t,favoritesListContainer);case"seasons":return(async t=>{var t=await(await fetch("https://api.tvmaze.com/seasons/"+t)).json(),e=t.url.split("season")[1].split("/")[2].split("-").map(t=>t.charAt(0).toUpperCase()+t.slice(1)).join(" ");return`
        <div class="flex items-center justify-between" >
      <div class="flex items-center gap-3 " data-id="${t.id}">
      <img src="${t.image?.medium||"/imgs/placeholder.png"}" alt="" class="w-[100px] rounded-lg" >
      <div>
      <h3 class="text-textColor font-bold text-lg">${t.name||"Season "+t.number} 
      <span class="text-textColor2 text-sm font-semibold mt-2 block">${e} - ${t.premiereDate.split("-")[0]} </span>
    </h3>
      </div>
      </div>
      <i class="fa-solid fa-trash text-textColor2 transition-colors hover:text-secondaryAccent duration-300 text-lg cursor-pointer" id="removeFromFavoriteList"></i>
      </div>
      `})(t);case"episodes":return(async t=>{var t=await(await fetch("https://api.tvmaze.com/episodes/"+t)).json(),e=t.url.match(/\/([^\/]+)-\d+x\d+/)[1].split("-").map(t=>t.charAt(0).toUpperCase()+t.slice(1)).join(" ");return`
        <div class="flex items-center justify-between" >
        <div class="flex items-center gap-3 " data-id="${t.id}">
        <img src="${t.image?.medium||"/imgs/placeholder.png"}" alt="" class="w-[100px] rounded-lg" >
        <div>
      <h3 class="text-textColor font-bold text-lg h-7 overflow-y-auto">${t.name||"Episode "+t.number} </h3>
      <span class="block text-textColor2 text-sm font-semibold mt-2">
      Season ${t.season} - Episode ${t.number} </span>
      <span class="block text-textColor2 text-sm font-semibold mt-2">${e} - ${t.airdate.split("-")[0]} </span>

      </div>
      </div>
      <i class="fa-solid fa-trash text-textColor2 transition-colors hover:text-secondaryAccent duration-300 text-lg cursor-pointer" id="removeFromFavoriteList"></i>
      </div>
      `})(t)}}))).join(""):`
<div class="flex flex-col items-center h-full justify-center ">
<img src="/imgs/undraw_no_data_re_kwbl.svg" alt="" class="w-[120px] mb-5">
<h2 class="font-bold text-textColor2 text-lg">List is empty</div>
</div>
`;favoritesListContainer.querySelector("#favorites").innerHTML=t,currentListFavorites=[...favoritesListContainer.querySelectorAll("[data-id]")]},searchListInput=(displayList(favoritesListButtons,favoritesListContainer,"favorite",displayFromFavoritesList),removeFromList("removeFromFavoriteList",favoritesListContainer,"favorite",favoritesList,displayFromFavoritesList,removeFromFavoritesList),toggleList("favoritesList_toggler",favoritesListContainer,actions,displayFromFavoritesList),closeList("favoritesList_toggler",favoritesListContainer,actions,displayFromFavoritesList),clearList(favoritesListContainer,favoritesList,"favorite",displayFromFavoritesList),sortList(favoritesListContainer),favoritesListContainer.querySelector("input"));actions.querySelector("#search").addEventListener("click",()=>{showSearchInput(favoritesListContainer,searchListInput,favoritesList,"favorite")}),searchListInput.addEventListener("keyup",t=>{"Enter"===t.key&&(searchList(searchListInput,favoritesListContainer,currentListFavorites),hideSearchInput(searchListInput))});export{favoritesList,addToFavoritesList,removeFromFavoritesList};