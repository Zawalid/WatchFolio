"use strict";import{toggleList,closeList,displayShow,displayList,removeFromList,clearList,sortList,searchList,showSearchInput,hideSearchInput,updateLocalStorageOrDatabase,retrieveFromLocalStorageOrDatabase,storeInLocalStorageOrDatabase}from"/utilities.min.js";const favoritesListContainer=document.getElementById("favoritesList");const actions=favoritesListContainer.querySelector("#actions");const favoritesListButtons=document.querySelectorAll("#favoritesListButtons button");let currentListFavorites=[...favoritesListContainer.querySelectorAll("[data-id]")];export const favoritesList={shows:{name:"favoriteShows",list:new Set},seasons:{name:"favoriteSeasons",list:new Set},episodes:{name:"favoriteEpisodes",list:new Set},defaultButton:`<i class="fa-solid fa-heart"></i> Add To Favorites`,activeButton:`<i class="fa-solid fa-heart"></i> Favorite`};for(let list in favoritesList){if(list==="defaultButton"||list==="activeButton")continue;list=favoritesList[list];retrieveFromLocalStorageOrDatabase("Favorites",list).then(res=>{const interval=setInterval(()=>{res.list.forEach(id=>{if(id===window.location.search.split("=")[1]&&document.querySelector(`#overview [data-favorite=shows]`)){document.querySelector(`#overview [data-favorite=shows]`).innerHTML=favoritesList.activeButton;clearInterval(interval)}})})})}storeInLocalStorageOrDatabase("Favorites",["favoriteShows","favoriteSeasons","favoriteEpisodes"]);export const addToFavoritesList=(id,type)=>{type.list.add(id);updateLocalStorageOrDatabase("Favorites",[favoritesList.shows,favoritesList.seasons,favoritesList.episodes])};export const removeFromFavoritesList=(id,type)=>{type.list.delete(id);updateLocalStorageOrDatabase("Favorites",[favoritesList.shows,favoritesList.seasons,favoritesList.episodes])};const displayFromFavoritesList=async type=>{favoritesListButtons.forEach(button=>{button.classList.remove("active")});favoritesListContainer.querySelector(`button[data-favorite='${type}'`).classList.add("active");const ids=favoritesList[type].list;ids.size===0?[...actions.querySelectorAll("i")].forEach(i=>{i.classList.replace("text-textColor2","text-[darkslategray]");i.classList.replace("cursor-pointer","cursor-not-allowed")}):[...actions.querySelectorAll("i")].forEach(i=>{i.classList.replace("text-[darkslategray]","text-textColor2");i.classList.replace("cursor-not-allowed","cursor-pointer")});const displaySeason=async id=>{const res=await fetch(`https://api.tvmaze.com/seasons/${id}`);const season=await res.json();const showName=season.url.split("season")[1].split("/")[2].split("-").map(a=>a.charAt(0).toUpperCase()+a.slice(1)).join(" ");return`
        <div class="flex items-center justify-between" >
      <div class="flex items-center gap-3 " data-id="${season.id}">
      <img src="${season.image?.medium||"imgs/placeholder.png"}" alt="" class="w-[100px] rounded-lg" >
      <div>
      <h3 class="text-textColor font-bold text-lg">${season.name||"Season "+season.number} 
      <span class="text-textColor2 text-sm font-semibold mt-2 block">${showName} - ${season.premiereDate.split("-")[0]} </span>
    </h3>
      </div>
      </div>
      <i class="fa-solid fa-trash text-textColor2 transition-colors hover:text-secondaryAccent duration-300 text-lg cursor-pointer" id="removeFromFavoriteList"></i>
      </div>
      `};const displayEpisode=async id=>{const res=await fetch(`https://api.tvmaze.com/episodes/${id}`);const episode=await res.json();const regex=/\/([^\/]+)-\d+x\d+/;const match=episode.url.match(regex);const showName=match[1].split("-").map(a=>a.charAt(0).toUpperCase()+a.slice(1)).join(" ");return`
        <div class="flex items-center justify-between" >
        <div class="flex items-center gap-3 " data-id="${episode.id}">
        <img src="${episode.image?.medium||"imgs/placeholder.png"}" alt="" class="w-[100px] rounded-lg" >
        <div>
      <h3 class="text-textColor font-bold text-lg h-7 overflow-y-auto">${episode.name||"Episode "+episode.number} </h3>
      <span class="block text-textColor2 text-sm font-semibold mt-2">
      Season ${episode.season} - Episode ${episode.number} </span>
      <span class="block text-textColor2 text-sm font-semibold mt-2">${showName} - ${episode.airdate.split("-")[0]} </span>

      </div>
      </div>
      <i class="fa-solid fa-trash text-textColor2 transition-colors hover:text-secondaryAccent duration-300 text-lg cursor-pointer" id="removeFromFavoriteList"></i>
      </div>
      `};const emptyList=`
<div class="flex flex-col items-center h-full justify-center ">
<img src="imgs/undraw_no_data_re_kwbl.svg" alt="" class="w-[120px] mb-5">
<h2 class="font-bold text-textColor2 text-lg">List is empty</div>
</div>
`;let html=ids.size>0?(await Promise.all([...ids].map(id=>{switch(type){case"shows":return displayShow(id,favoritesListContainer);case"seasons":return displaySeason(id);case"episodes":return displayEpisode(id)}}))).join(""):emptyList;favoritesListContainer.querySelector("#favorites").innerHTML=html;currentListFavorites=[...favoritesListContainer.querySelectorAll("[data-id]")]};displayList(favoritesListButtons,favoritesListContainer,"favorite",displayFromFavoritesList);removeFromList("removeFromFavoriteList",favoritesListContainer,"favorite",favoritesList,displayFromFavoritesList,removeFromFavoritesList);toggleList("favoritesList_toggler",favoritesListContainer,actions,displayFromFavoritesList);closeList("favoritesList_toggler",favoritesListContainer,actions,displayFromFavoritesList);clearList(favoritesListContainer,favoritesList,"favorite",displayFromFavoritesList);sortList(favoritesListContainer);const searchListInput=favoritesListContainer.querySelector("input");actions.querySelector("#search").addEventListener("click",()=>{showSearchInput(favoritesListContainer,searchListInput,favoritesList,"favorite")});searchListInput.addEventListener("keyup",e=>{if(e.key==="Enter"){searchList(searchListInput,favoritesListContainer,currentListFavorites);hideSearchInput(searchListInput)}});