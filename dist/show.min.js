"use strict";import{watchLists as s,addToWatchList as o,removeFromWatchList as i}from"/watchList.min.js";import{favoritesList as l,addToFavoritesList as n,removeFromFavoritesList as r}from"/favoritesList.min.js";import{handleUserAuth as e,handleAccount as t,checkIfUserIsLoggedIn as q,retrieveFromLocalStorageOrDatabase as a,updateLocalStorageOrDatabase as d,storeInLocalStorageOrDatabase as c}from"/utilities.min.js";const m={method:"GET",headers:{accept:"application/json",Authorization:"Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI3OWUxNjZjMzNhZjE4ZmVlNTgzNWJiMDBiOGE5ZTA1NCIsInN1YiI6IjY0YTJiOTcxMTEzODZjMDBhZGM3OTQxMyIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.yxORg4upeOsiqCve7e9CDV4i-_Q2LfIpnqKKax3Fnw4"}},p={0:"Not Specified",1:"Female",2:"Male",3:"Non Binary"},x="http://image.tmdb.org/t/p/",f=`
<div
class="fixed inset-0 -z-10 flex h-full w-full cursor-zoom-out bg-[#0005] opacity-0 backdrop-blur-[2px] transition-opacity duration-500 max-md:h-full md:items-center md:justify-center"
id="overview"
>
<div
  class="relative bg-gradient flex min-h-[500px] h-[80vh] overflow-auto w-4/5 cursor-auto flex-col gap-10 rounded-xl  p-8 shadow-shadow1 max-md:left-0 max-md:h-full max-md:w-full max-md:translate-x-0  max-md:pb-[75px] max-md:pt-14 max-sm:rounded-none"
></div>
</div>
`;for(let e=0;e<3;e++)document.body.insertAdjacentHTML("beforeend",f);document.querySelectorAll("#overview")[1].id="season_overview",document.querySelectorAll("#overview")[1].id="person_overview",document.querySelectorAll("#overview")[1].firstElementChild.className="relative flex min-h-[500px] w-4/5 cursor-auto flex-col gap-10 rounded-xl bg-gradient  bg-cover bg-center shadow-shadow1 max-md:left-0 max-md:h-full  overflow-auto max-md:w-full max-md:translate-x-0 max-md:overflow-y-auto max-sm:rounded-none overflow-hidden",document.querySelectorAll("#overview")[1].id="episode_overview";const u=e=>{var t=[];for(let e=0;e<5;e++){var a=document.createElement("i");a.classList.add("fa-solid","fa-star","text-textColor2"),t.push(a)}var s=Math.round(e)/10*5;for(let e=0;e<s;e++)t[e].classList.replace("text-textColor2","text-primaryAccent");return t},h=e=>{e.classList.add("show"),e===y?e.innerHTML=`
    <i
    class="fa-solid fa-spinner absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 animate-spin text-4xl text-thirdAccent"
  ></i>
    `:e.firstElementChild.innerHTML=`
  <i
  class="fa-solid fa-spinner absolute left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2 animate-spin text-4xl text-thirdAccent"
></i>
  `},g=(e,t,a=null)=>{setTimeout(()=>{e.firstElementChild.innerHTML=t,e===A&&(R(),Z(),H(A.querySelector("button"),"season")),e===k&&(document.documentElement.style.setProperty("--episode-bg",`url(${a})`),H(k.querySelector("button"),"episode"))},1e3),window.matchMedia("(max-width: 768px)").matches&&(window.scrollTo(0,0),document.body.classList.add("h-screen","overflow-hidden"))},v=t=>{t.addEventListener("click",e=>{!e.target.closest("#close")&&e.target!==e.currentTarget||(t!==k&&document.body.classList.remove("h-screen","overflow-hidden"),t.classList.remove("show"),t.firstElementChild.innerHTML="",t!==k)||document.documentElement.style.setProperty("--episode-bg","linear-gradient(306deg, #000 0%, #0b1531 100%)")})},w=async e=>(await(await fetch("https://api.themoviedb.org/3/search/tv?query="+e,m)).json()).results[0].id,b=async e=>{try{var t=await(await fetch("https://api.tvmaze.com/singlesearch/shows?q="+e)).json();return{info:`
    <div
    class="blur-[60px] top-0 absolute -z-10 flex h-full w-full flex-col gap-3 bg-dark p-3 transition-all duration-[.8s] group-hover:z-10 group-hover:bg-dark group-hover:bg-opacity-50 group-hover:blur-0"
  >
          <div
            class="w-fit rounded-lg bg-thirdAccent px-3 text-sm font-semibold text-textColor"
          >
            ${t.genres[0]||"No genre"}
          </div>
          <div
            class="flex w-fit items-center gap-1 rounded-lg bg-secondaryAccent px-3 text-sm font-semibold text-textColor"
          >
            ${t.rating.average||"Not rated"} <i class="fa-solid fa-star text-primaryAccent"></i>
          </div>
          <h3 class="mt-auto font-logo text-lg font-bold text-textColor">
          ${t.name}
          </h3>
          </div>
       
  `,id:t.id}}catch(e){}},y=document.getElementById("overview");let $,E,C,L;const S=async()=>{try{var e=await(await fetch("https://api.tvmaze.com/shows/"+window.location.search.split("=")[1])).json(),t=($=e.name,L=e.image?.medium||"imgs/placeholder.png",document.title=e.name,e.summary=e.summary?.replace(/<p>|<\/p>/g,""),e.genres.map(e=>`
    <div
    class="w-fit rounded-lg bg-thirdAccent px-3 text-sm font-semibold text-textColor"
  >
    ${e}
  </div>
    `).join("")),a=await j(),s=await W(),o=await T(await w($),"similar"),i=await T(await w($),"recommendations");y.innerHTML=`
    <div class="mb-16 mt-9 flex w-full items-center gap-7 max-sm:flex-col">
    <div class="flex flex-col gap-3">
    <img
      src="${L}"
      alt=""
      class="w-[300px] rounded-lg shadow-shadow1 max-sm:w-[230px]"
    />
    <button class="flex justify-center items-center gap-2 rounded-lg bg-red-700 px-5 py-2 font-semibold text-textColor transition-colors duration-300 hover:bg-opacity-80" id="addToFavorites"
    data-favorite="shows"
    data-id="${e.id}"
    >
      <i class="fa-solid fa-heart"></i>
Add To Favorites      </button>
      </div>
    <div class="flex w-full flex-1 flex-col gap-6 max-sm:items-center">
      <h1
        class="font-logo text-4xl font-extrabold text-primaryAccent max-sm:text-3xl"
      >
        ${e.name}
        <span class="ms-2 font-mono text-lg font-semibold text-textColor"
          >(${e.premiered.split("-")[0]})</span
        >
      </h1>
      <div class="flex gap-5 flex-wrap max-sm:justify-center">
        ${t}
      </div>
      <div
        class="flex w-fit items-center gap-5 rounded-lg bg-dark bg-opacity-30 px-3 py-1 text-sm font-semibold text-textColor backdrop-blur-sm"
      >
        <span>${e.rating.average||"Unrated"}</span>
        <div class="flex gap-2">
          ${u(Math.round(e.rating.average)).map(e=>e.outerHTML).join("")}
      </div>
      </div>
      <div class="mt-5 gap-6 w-3/4 max-sm:w-full  grid grid-cols-[repeat(auto-fit,minmax(152px,1fr))]">
        <button
          class=" cursor-pointer rounded-3xl bg-secondaryAccent px-5 py-3 font-semibold text-textColor transition-colors duration-300 hover:bg-opacity-80 flex items-baseline gap-2 justify-center
          " data-list="watched"
        >
          I Watched
        </button>
        <button
          class=" cursor-pointer rounded-3xl bg-dark px-5 py-3 font-semibold text-textColor transition-colors duration-300 hover:bg-opacity-80 flex items-baseline gap-2 justify-center
          " data-list="watching"
        >
          I'm Watching
        </button>
        <button
          class="max-wrap:col-span-full cursor-pointer rounded-3xl bg-thirdAccent px-5 py-3 font-semibold text-textColor transition-colors duration-300 hover:bg-opacity-80 flex items-baseline gap-2 justify-center
          " data-list="willWatch"
        >
          I Will Watch
        </button>
      </div>
    </div>
  </div>
    
  
<div
class="my-7 flex w-full items-start justify-between max-sm:flex-col max-sm:gap-10"
>
<div class="w-[40%] max-sm:w-full">
  <details open>
    <summary class="mb-5 text-xl font-bold text-thirdAccent">
      Storyline
    </summary>
    <p class="text-lg font-semibold leading-snug text-textColor2">
     ${e.summary}
    </p>
  </details>
</div>
<div class="w-[40%] max-sm:w-full">
  <details open>
    <summary class="mb-5 text-xl font-bold text-thirdAccent">
      Details
    </summary>
    <div class="flex items-center gap-4 text-lg">
      <span class="font-semibold text-textColor2">Id :</span>
      <span class="text-textColor">${e.id}</span>
    </div>
    <div class="mt-3 flex items-center gap-4 text-lg">
      <span class="font-semibold text-textColor2">Language :</span>
      <span class="text-textColor">${e.language||"Unknown"}</span>
    </div>
    <div class="mt-3 flex items-center gap-4 text-lg">
      <span class="font-semibold text-textColor2">Release Date :</span>
      <span class="text-textColor">${e.premiered||"Unknown"}</span>
    </div>
    <div class="mt-3 flex items-center gap-4 text-lg">
      <span class="font-semibold text-textColor2">Status :</span>
      <span class="text-textColor" id="showStatus">${e.status||"Unknown"}</span>
    </div>
    <div class="mt-3 flex items-center gap-4 text-lg">
      <span class="font-semibold text-textColor2">Network :</span>
      <span class="text-textColor capitalize">${e.network?.name||e.officialSite?.split(".")[1]||"Unknown"}</span>
    </div>
  </details>
</div>
</div>
${a}
${s}
${0!==o.length?o:""}
${0!==i.length?i:""}
      `,document.documentElement.style.setProperty("--bg",`url(${e.image.original})`),C=[...document.querySelectorAll("#season")]}catch(e){y.innerHTML=_(),window.addEventListener("offline",()=>{window.location.href="./offline.html"})}},j=async()=>{const a=await(await fetch(`https://api.tvmaze.com/shows/${window.location.search.split("=")[1]}/seasons`)).json();return a.forEach((e,t)=>{e.premiereDate||a.splice(t,1)}),`
  <div class="mb-8">
  <details open>
    <summary class="mb-5 text-xl font-bold text-thirdAccent">
      Seasons
    </summary>
    <div class="flex flex-wrap gap-8 max-sm:justify-center">
      ${a.map(e=>`
      <div data-id="${e.id}" class="flex flex-col items-center gap-3 cursor-pointer"  id="season">
      <img
        src="${e.image?.medium||L}"
        alt=""
        class="w-[150px] rounded-lg transition-all duration-500 hover:shadow-[-19px_15px_20px_#000] shadow-shadow1 flex-1"
      />
      <span class="text-lg font-semibold text-textColor">Season ${e.number}</span>
    </div>
    `).join("")}
    </div>
  </details>
</div>
  `},W=async()=>{var e=await fetch(`https://api.tvmaze.com/shows/${window.location.search.split("=")[1]}/cast`);const t=(e,t,a)=>`
    <div class="flex flex-col  gap-3 cursor-pointer" data-character="${t}" data-name="${e}" id="person">
    <img
    src="${a||"imgs/placeholder.png"}"
    alt=""
    class="w-[120px] rounded-lg shadow-shadow1 transition-all duration-300 hover:grayscale"
    />
    <span class="text-lg font-semibold text-textColor">${e}</span></div>`,a=()=>`
    ${s.slice(0,15).map(e=>`
        ${t(e.person.name,e.character.name,e.person.image?.medium)}
        `).join("")}
      ${15<s.length?'<a class="flex flex-col items-center justify-center text-thirdAccent text-lg font-bold h-fit m-auto cursor-pointer" id="showMore">Show More</a>':""}
      `,s=await e.json();e=`
    <div class="mb-8">
    <details open>
        <summary class="mb-5 text-xl font-bold text-thirdAccent">
        Cast
        </summary>
        <div class="grid grid-cols-[repeat(auto-fit,110px)] text-center gap-8 max-sm:justify-center ${0===s.length?"font-bold text-lg text-textColor2":""}" id="cast">
        ${0!==s.length?a():"No cast available"}
        </div>
    </details>
    </div>
    `;return document.addEventListener("click",e=>{e.target.closest("#showMore")&&(document.getElementById("cast").innerHTML=`
    ${s.map(e=>`
        ${t(e.person.name,e.character.name,e.person.image?.medium)}
        `).join("")}
      <a class="flex flex-col items-center justify-center text-thirdAccent text-lg font-bold h-fit m-auto cursor-pointer" id="showLess">Show Less</a>
      `),e.target.closest("#showLess")&&(document.getElementById("cast").innerHTML=a())}),e},_=()=>(document.documentElement.style.setProperty("--bg","url(.imgs/bg.jpg)"),`
    <div
    class="absolute left-1/2 top-1/2 w-2/3 -translate-x-1/2 -translate-y-1/2 px-4 max-sm:w-full"
  >
    <img
      src="imgs/no_result.png"
      alt=""
      class="mx-auto w-[400px]"
    />
    <h1
      class="text-center text-xl font-bold leading-relaxed text-textColor2"
    >
      Oops! The TV show ID you entered is incorrect or doesn't exist.
      Please double-check the ID and try again.
      <spam class="text-primaryAccent">Thank you!</spam>
    </h1>
  </div>
    `),T=async(e,t)=>{e=await(await fetch(`https://api.themoviedb.org/3/tv/${e}/`+t,m)).json();const a=await Promise.all(e.results.map(e=>b(e.name)));e.results.forEach((e,t)=>{e.info=a[t]}),e.results=e.results=e.results.filter((t,e,a)=>t.info&&a.findIndex(e=>e.info?.id===t.info?.id)===e);var s=e.results.map(e=>e.info?`
      <a href="show.html?id=${e?.info?.id}">
      <div class=" h-[270px] w-16 hover:w-48 transition-all duration-300 peer group relative overflow-hidden">
        <img
          src="${e.poster_path?x+"original"+e.poster_path:"imgs/placeholder.png"}"
          alt=""
          class="w-full h-full object-cover rounded-md shadow-shadow1 mb-2"
        />
        ${e?.info?.info}
        </div>
        </a>
    `:"").join("");return`
  <div class="mb-8">
  <details open>
  <summary class="mb-5 text-xl font-bold text-thirdAccent">
    ${"recommendations"===t?"Recommendations":"Similar Shows"}
  </summary>
  <div
    class="my-7 flex gap-3 overflow-x-auto max-md:pb-7 ${0===e.results.length?"font-bold text-lg text-textColor2 justify-center":""}"
  >
    ${0<e.results.length?s:"recommendations"===t?"No recommendations available":"No similar shows available"}
  </div>
  </details>
  </div>
  `},A=(S(),window.addEventListener("hashchange",S),document.getElementById("season_overview")),I=async e=>{localStorage.setItem("currentSId",e),h(A);var t=await(await fetch("https://api.tvmaze.com/seasons/"+e)).json(),a=(E=t.number,await D($,t.number)),t=(t.summary=t.summary?.replace(/<p>/g,""),`
  <i
    class="fa-solid fa-xmark text-textColor2 absolute right-4 top-4 cursor-pointer text-2xl"
    id="close"
  ></i>
  <div class="flex w-full items-start gap-7 max-sm:flex-col">
  <div class="flex flex-col gap-3 max-sm:self-center">
    <img
      src="${t.image?.medium||L} "
      alt=""
      class="w-[230px] rounded-lg shadow-shadow1 "
    />
    <button class="flex justify-center items-center gap-2 rounded-lg bg-red-700 px-5 py-2 font-semibold text-textColor transition-colors duration-300 hover:bg-opacity-80" id="addToFavorites"
    data-favorite="seasons"
    data-id="${t.id}"
    >
      <i class="fa-solid fa-heart"></i>
Add To Favorites      </button>
  </div>
    <div class="flex flex-1 flex-col gap-6 ">
      <h1
        class="font-logo text-4xl font-extrabold text-primaryAccent max-sm:text-3xl max-md:text-center"
      >
        Season ${t?.number}
        <span class="ms-2 font-mono text-lg font-semibold text-textColor"
          >(${t.premiereDate?.split("-")[0]||""})</span
        >
      </h1>
      <div class="">
        <details open>
          <summary class="mb-5 text-xl font-bold text-thirdAccent">
            Details
          </summary>
          <div class="mt-3 flex items-center gap-4 text-lg">
            <span class="font-semibold text-textColor2">Episodes :</span>
            <span class="text-textColor">${t?.episodeOrder||"Unconfirmed"}</span>
          </div>
          <div class="mt-3 flex items-center gap-4 text-lg">
            <span class="font-semibold text-textColor2"
              >Release Date :</span
            >
            <span class="text-textColor">${t?.premiereDate||"Unconfirmed"}</span>
          </div>
          <div class="mt-3 flex items-center gap-4 text-lg">
            <span class="font-semibold text-textColor2">End Date :</span>
            <span class="text-textColor">${t?.endDate}</span>
          </div>
        </details>
      </div>
      <div class="">
        <details open>
          <summary class="mb-5 text-xl font-bold text-thirdAccent">
            Summary
          </summary>
          <p class="text-lg font-semibold leading-snug text-textColor2">
           ${t.summary||"No summary available"}
          </p>
        </details>
      </div>
    </div>
  </div>
  <div>
    <details open>
      <summary class="mb-5 text-xl font-bold text-thirdAccent">
        Trailer
      </summary>
      ${a?`
      <iframe src="https://www.youtube.com/embed/${a}" frameborder="0" allowfullscreen class="rounded-xl w-full h-[400px] max-sm:h-[250px] max-md:h-[300px]"></iframe>`:'<p class="text-lg font-semibold leading-snug text-textColor2 text-center">No trailer available</p>'}
    </details>
  </div>
  <div>
    <details open>
      <summary class="mb-5 text-xl font-bold text-thirdAccent">
        Episodes
      </summary>
      <div class="mt-7 flex flex-col md:h-[300px] md:overflow-y-scroll  gap-3">
      ${await z(e)}
      </div>
    </details>
  </div>
  <div class="flex justify-evenly items-center  max-md:pb-7"> 
  <button class="flex justify-center items-center gap-2 rounded-lg bg-secondaryAccent px-5 py-3 font-semibold text-textColor transition-colors duration-300 hover:bg-opacity-80" id="previousSeason">
  <i class="fa-solid fa-chevron-left"></i>
  <span>${window.matchMedia("(min-width: 768px)").matches?"Season":""} ${C[E-2]?E-1:C.length}</span>
  </button>
  <button class="h-12 flex justify-center items-center gap-2 rounded-lg bg-secondaryAccent px-5 py-3 font-semibold text-textColor transition-colors duration-300 hover:bg-opacity-80" id="seasonWatched"
  data-state="notWatched"
  >
  <i class="fa-solid fa-check"></i>
  <span>Season watched</span>
  </button>
  <button class="flex justify-center items-center gap-2 rounded-lg bg-secondaryAccent px-5 py-3 font-semibold text-textColor transition-colors duration-300 hover:bg-opacity-80" id="nextSeason">
  <span>${window.matchMedia("(min-width: 768px)").matches?"Season":""} ${C[E]?E+1:1}</span>
  <i class="fa-solid fa-chevron-right"></i>
  </button>
  </div>
  `);g(A,t)},D=async(e,t)=>{e=(await(await fetch(`https://api.themoviedb.org/3/tv/${await w(e)}/season/${t}?append_to_response=images%2Cvideos`,m)).json()).videos.results?.filter(e=>"Trailer"===e.type);return e[e.length-1]?.key},z=async e=>{let t=await(await fetch(`https://api.tvmaze.com/seasons/${e}/episodes`)).json();return(t=t.filter(e=>e.number)).map((e,t,a)=>`
      <div
  class="flex items-center gap-3 cursor-pointer group " id="episode" data-id="${e.id}" data-info="${e.name}|${e.number}|${e.rating.average}">
        <h2 class="text-2xl font-bold text-center text-textColor2 flex justify-center items-center w-9 h-9 border group-hover:bg-secondaryAccent group-hover:border-secondaryAccent transition-colors duration-300 border-textColor2 rounded-full ${a.length-1!==t&&"relative before:absolute before:h-[77px] max-sm:before:h-[65px] before:w-[2px] before:bg-textColor2 before:top-full before:left-1/2 before:-translate-x-1/2"} ">${e.number||"Special"}</h2>
        <img src="${e.image?.original||"imgs/placeholder.png"}" alt="" class="w-[150px] aspect-[3/2] object-cover rounded-xl max-sm:w-[100px]" />
        <div class="flex flex-1 flex-col gap-2">
          <h3 class="text-lg font-bold text-textColor h-7 overflow-y-auto">
           ${e.name||"Unknown"}
          </h3>
          <div
            class="flex w-fit items-center gap-1 text-sm font-semibold text-textColor2"
          >
            ${e.rating?.average||"Unrated"}
            <div class="flex gap-2">
            ${u(Math.round(e.rating.average)).map(e=>e.outerHTML).join("")}
            </div>
          </div>
          <div class="flex items-center gap-2">
            <i class="fa-solid fa-clock text-textColor2"></i>
            <span class="font-semibold text-textColor">${e.runtime?60<e.runtime?`${Math.floor(e.runtime/60)}h ${Math.floor(e.runtime%60)}min `:e.runtime+"min":"Unknown"}</span>
          </div>
        </div>
      </div>
  `).join("")},M=(document.addEventListener("click",e=>{e.target.closest("#season")&&I(e.target.closest("#season").dataset.id)}),v(A),document.getElementById("person_overview")),F=async(e,t)=>{h(M);var e=await O(e),a=await(await fetch("https://api.themoviedb.org/3/person/"+e,m)).json(),s=(new Date).getFullYear()-new Date(a.birthday).getFullYear(),t=`

  <i
    class="fa-solid fa-xmark absolute right-4 top-4 cursor-pointer text-2xl text-textColor2"
    id="close"
  ></i>
  <div class="flex w-full items-start gap-7 max-sm:flex-col">
    <img src="${x+"original"+a.profile_path||"imgs/placeholder.png"} "
    alt="" class="w-[230px] rounded-lg shadow-shadow1 max-sm:self-center"
    />
    <div class="flex flex-1 flex-col gap-6">
      <h1
        class="font-logo text-4xl font-extrabold text-primaryAccent max-sm:text-3xl max-md:text-center"
      >
        ${a.name}
        <span class="ms-2 font-mono text-lg font-semibold text-textColor max-md:block"
          >(${t})</span
        >
      </h1>
      <div class="">
        <details open>
          <summary class="mb-5 text-xl font-bold text-thirdAccent">
            Personal Info
          </summary>
          <div class="mt-3 flex items-center gap-4 text-lg">
            <span class="font-semibold text-textColor2">Age :</span>
            <span class="text-textColor"
              >${s}</span
            >
          </div>
          <div class="mt-3 flex items-center gap-4 text-lg">
            <span class="font-semibold text-textColor2"
              >Gender :</span
            >
            <span class="text-textColor">${p[a.gender]}</span>
          </div>
          <div class="mt-3 flex items-center gap-4 text-lg">
            <span class="font-semibold text-textColor2">Birthday :</span>
            <span class="text-textColor">${a.birthday}</span>
          </div>
          <div class="mt-3 flex items-center gap-4 text-lg">
            <span class="font-semibold text-textColor2">Place of birth :</span>
            <span class="text-textColor">${a.place_of_birth}</span>
          </div>
        </details>
      </div>
      <div class="">
        <details>
          <summary class="mb-5 text-xl font-bold text-thirdAccent">
            Biography
          </summary>
          <p class="text-lg font-semibold leading-snug text-textColor2">
            ${a.biography||"No biography available"}
          </p>
        </details>
      </div>
    </div>
  </div>
  <div>
    <details open>
      <summary class="mb-5 text-xl font-bold text-thirdAccent">
        Other TV Shows
      </summary>
      <div
        class="my-7 flex gap-3 overflow-x-auto max-md:pb-7"
      >
        ${await U(e)}
      </div>
    </details>
  </div>
`;g(M,t)},O=async e=>(await(await fetch(`https://api.themoviedb.org/3/search/person?query=${e}&page=1`,m)).json()).results[0].id,U=async e=>{e=await(await fetch(`https://api.themoviedb.org/3/person/${e}/tv_credits`,m)).json();const t=document.querySelector("h1").firstChild.textContent.trim(),a=(e.cast=e.cast.filter(e=>e.name!==t),await Promise.all(e.cast.map(e=>b(e.name))));return e.cast.forEach((e,t)=>{e.info=a[t]}),e.cast=e.cast=e.cast.filter((t,e,a)=>t.info&&a.findIndex(e=>e.info?.id===t.info?.id)===e),e.cast.map(e=>e.info?`
      <a href="show.html?id=${e?.info?.id}">
      <div class=" h-[270px] w-16 hover:w-48 transition-all duration-300 peer group relative overflow-hidden">
        <img
          src="${e.poster_path?x+"original"+e.poster_path:"imgs/placeholder.png"}"
          alt=""
          class="w-full h-full object-cover rounded-md shadow-shadow1 mb-2"
        />
        ${e?.info?.info}
        </div>
        </a>
    `:"").join("")},k=(document.addEventListener("click",e=>{e.target.closest("#person")&&F(e.target.closest("#person").dataset.name,e.target.closest("#person").dataset.character)}),v(M),document.getElementById("episode_overview")),J=async(e,t,a)=>{h(k);var s=await w(e),s=await(await fetch(`https://api.themoviedb.org/3/tv/${s}/season/${t}/episode/`+a.episodeNumber,m)).json(),o=await P(e),i=x+"original"+s.still_path||".imgs/placeholder.png",e=`
<i
          class="fa-solid fa-xmark absolute right-4 top-4 cursor-pointer text-2xl z-10 text-textColor2"
          id="close"
        ></i>
        <div
          class="flex w-full flex-1 flex-col gap-7 bg-black bg-opacity-50 p-8 max-md:pb-[75px] max-md:pt-14 max-sm:flex-col"
        >
          <h1 class="text-4xl font-bold text-textColor">
            ${e} season ${t} episode ${a.episodeNumber} :
          </h1>
          <div
            class="flex w-full flex-1 flex-col items-start justify-center gap-5"
          >
            <div class="flex gap-2 text-lg font-bold text-textColor2">
              Name :
              <h2 class="text-lg font-semibold text-textColor">
                ${a.episodeName||s.name}
              </h2>
            </div>
            <div class="flex gap-2 text-lg font-bold text-textColor2">
              Rating :
              <div
                class="flex w-fit items-center gap-5 rounded-lg bg-dark bg-opacity-30 px-3 py-1 text-sm font-semibold text-textColor backdrop-blur-sm"
              >
                <span>${a.episodeRating||"Unrated"}</span>
                <div class="flex gap-2">
                  ${u(a.episodeRating).map(e=>e.outerHTML).join("")}
                </div>
              </div>
            </div>
            <div class="flex gap-2 text-lg font-bold text-textColor2">
              Runtime :
              <div class="flex items-center gap-2 text-textColor">
                <i class="fa-solid fa-clock"></i>
                <span class="font-semibold">${s.runtime?60<s.runtime?`${Math.floor(s.runtime/60)}h ${Math.floor(s.runtime%60)}min `:s.runtime+"min":"Unknown"}</span>
              </div>
            </div>
            <p class="text-lg font-bold leading-snug text-textColor">
              <span class="text-textColor2">Overview :</span>
              ${s.overview||"No overview available"}
            </p>
                <div class="flex gap-3 mt-5 flex-wrap">
            <a
              href="${o||"#"}" target="_blank"
              class="flex-1 min-w-[190px] flex justify-center items-center gap-2 cursor-pointer rounded-lg bg-thirdAccent px-5 py-2 text-center font-bold text-textColor transition-colors duration-300 hover:bg-opacity-80"
              id="watchNow"
            >
            <i class="fa-solid fa-play"></i>
              Watch Now
            </a>
            <button class="min-w-[190px] flex-1 flex justify-center items-center gap-2 cursor-pointer rounded-lg bg-secondaryAccent px-5 py-2 text-center font-bold text-textColor transition-colors duration-300 hover:bg-opacity-80"
            id="addToFavorites"
            data-favorite="episodes"
            data-id="${localStorage.getItem("currentEpId")}"
            >
            <i class="fa-solid fa-heart"></i>
Add To Favorites            </button>

          </div>
          </div>
        </div>
`;g(k,e,i)},P=async e=>(await(await fetch("https://api.themoviedb.org/3/tv/"+await w(e),m)).json()).homepage,N=(document.addEventListener("click",t=>{if(t.target.closest("#episode")){let e=t.target.closest("#episode").dataset.info;e={episodeName:e.split("|")[0],episodeNumber:e.split("|")[1],episodeRating:e.split("|")[2]},J($,E,e),localStorage.setItem("currentEpId",t.target.closest("#episode").dataset.id)}}),v(k),{watchedEpisodes:{name:"watchedEpisodes",episodes:new Set,icon:'<i class="fa-solid fa-eye text-lg"></i>'},watchingEpisodes:{name:"watchingEpisodes",episodes:new Set,icon:'<i class="fa-solid fa-play text-lg"></i>'}});for(let e in N)a("Episodes",e=N[e]);c("Episodes",["watchedEpisodes","watchingEpisodes"]),document.addEventListener("click",e=>{if(e.target.closest("#watchNow")){B();const a=localStorage.getItem("currentEpId");e=[...document.querySelectorAll("#episode h2")];const s=e.indexOf(e.find(e=>e.parentElement.dataset.id===a));e.map((e,t)=>{t<s&&(e.innerHTML=N.watchedEpisodes.icon,N.watchingEpisodes.episodes.has(e.parentElement.dataset.id)&&N.watchingEpisodes.episodes.delete(e.parentElement.dataset.id),N.watchedEpisodes.episodes.add(e.parentElement.dataset.id)),t!==s||N.watchedEpisodes.episodes.has(e.parentElement.dataset.id)||(N.watchingEpisodes.episodes.add(a),e.innerHTML=N.watchingEpisodes.icon)}),d("Episodes",[N.watchedEpisodes,N.watchingEpisodes])}});const R=()=>{setTimeout(()=>{[...document.querySelectorAll("#episode h2")].map(e=>{for(const t in N)N[t].episodes.has(e.parentElement.dataset.id)&&(e.innerHTML=N[t].icon)}),[...document.querySelectorAll("#episode h2")].every(e=>e.innerHTML===N.watchedEpisodes.icon)&&document.querySelector("#seasonWatched span")?.remove()},1500)},B=()=>{o(window.location.search.split("=")[1],s.watching),document.querySelector("[data-list=watching]").innerHTML=s.watching.activeButton},Z=(document.addEventListener("click",e=>{e.target.closest("#previousSeason")&&(C[E-2]?I(C[E-2].dataset.id):I(C[C.length-1].dataset.id)),e.target.closest("#nextSeason")&&(C[E]?I(C[E].dataset.id):I(C[0].dataset.id))}),document.addEventListener("click",e=>{var t;e.target.closest("#seasonWatched")&&(t=[...document.querySelectorAll("#episode h2")],"notWatched"===e.target.closest("#seasonWatched").dataset.state?(e.target.closest("#seasonWatched").dataset.state="watched",document.querySelector("#seasonWatched span")?.remove(),t.map(e=>{e.innerHTML=N.watchedEpisodes.icon,N.watchingEpisodes.episodes.has(e.parentElement.dataset.id)&&N.watchingEpisodes.episodes.delete(e.parentElement.dataset.id),N.watchedEpisodes.episodes.add(e.parentElement.dataset.id)}),d("Episodes",[N.watchedEpisodes,N.watchingEpisodes]),1!==[...document.querySelectorAll("#season")].length&&E!==[...document.querySelectorAll("#season")].length||"Ended"!==document.getElementById("showStatus").innerText?B():(o(window.location.search.split("=")[1],s.watched),document.querySelector("[data-list=watched]").innerHTML=s.watched.activeButton)):(e.target.closest("#seasonWatched").dataset.state="notWatched",document.getElementById("seasonWatched").innerHTML=`
      <i class="fa-solid fa-check"></i>
      <span>Season watched</span>
      `,t.map((e,t)=>{e.innerHTML=t+1,N.watchedEpisodes.episodes.has(e.parentElement.dataset.id)&&N.watchedEpisodes.episodes.delete(e.parentElement.dataset.id)}),d("Episodes",[N.watchedEpisodes,N.watchingEpisodes]),s.watched.shows.has(window.location.search.split("=")[1])?i(window.location.search.split("=")[1],s.watched)(document.querySelector("[data-list=watched]").innerHTML=s.watched.defaultButton):i(window.location.search.split("=")[1],s.watching)(document.querySelector("[data-list=watching]").innerHTML=s.watching.defaultButton)))}),()=>{1===C.length?[document.getElementById("previousSeason"),document.getElementById("nextSeason")].forEach(e=>e.classList.replace("flex","hidden")):[document.getElementById("previousSeason"),document.getElementById("nextSeason")].forEach(e=>e.classList.replace("hidden","flex")),[...document.querySelectorAll("#episode h2")].every(e=>e.innerHTML===N.watchedEpisodes.icon)&&document.querySelector("#seasonWatched span")?.remove()}),H=(e(),t(),y.addEventListener("click",e=>{var t,a=window.location.search.split("=")[1];"BUTTON"===e.target.tagName&&e.target.hasAttribute("data-list")&&((t=s[e.target.dataset.list]).shows.has(a)?(i(a,t),e.target.innerHTML=t.defaultButton):(o(a,t),e.target.innerHTML=t.activeButton))}),document.addEventListener("click",e=>{var t,a;e.target.closest("#addToFavorites")&&(t=e.target.closest("#addToFavorites").dataset.id,a=e.target.closest("#addToFavorites").dataset.favorite,l[a].list.has(t)?(r(t,l[a]),e.target.innerHTML=l.defaultButton):(n(t,l[a]),e.target.innerHTML=l.activeButton))}),(t,a)=>{const s=setInterval(()=>{for(const e in l)l[e].list?.forEach(e=>{e===localStorage.getItem("season"===a?"currentSId":"currentEpId")&&(t.innerHTML=l.activeButton,clearInterval(s))})})});